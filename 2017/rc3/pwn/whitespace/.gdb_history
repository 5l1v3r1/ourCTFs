i br
c
c
si
si
si
si
si
tele $rbp-0x14
si
x/wx $rbp-0x14
tele $rbp-0x14
si
si
ni
si
c
c
di
si
si
c
i br
del br 3
c
c
si
si
ni
si
x/gx 0x7ffdf2a468a0
x/120gx 0x7ffdf2a468a0
x/20gx 0x7ffdf2a468a0
si
x/20gx 0x7ffdf2a468a0
si
p $rax
p/x $rax
si
x/20gx 0x7ffdf2a468a0
si
b * create_heap 
b * step_through_program 
si
p heap
p heap
tele heap
p $heap
p $label_table 
p/x $label_table 
fin
p/x $heap
p $heap
tele $heap
$heap
p $heap
x/wx $heap
x/wx *heap
si
si
si
ni
x/wx $rip+0x203086
x/gx $rip+0x203086
si
x/gx $rip+0x203086
si
ni
si
i br
c
si
ni
si
c
si
ni
p $rax
p/x $rax
$heap
p *heap
p/x $heap
p/x *$heap
p/x *($heap)
p/x ($heap)
p ($heap)
p *($heap)
heap
p/x heap_get
p system
p ws_stack_push
p system
p/x  0x7f73074bc390 - 0x401b09
find "/bin/sh"
 search "/bin/sh"
i br
1. Leak address of function using heap_get
2. Calculate address of system, /bin/sh
3. Use heap_put to put address of system on to instruction table
4. Use heap_put to put address of /bin/sh to instruction table
5. Call function to trigger instruction to system
x/50gx 0x7ffe821ee690
x/50gx 0x7ffe821ee680
x/20gx 0x7ffe821ee680
x/20gx 0x7ffe821ee680+8
x/gx 0x7ffe821ee680+8
p/x *0x7ffe821ee690
p/x * (long long *)0x7ffe821ee690
p/x * (long*)0x7ffe821ee690
p/x * (long)0x7ffe821ee690
p/x * (long)0x7ffe821ee680
p/x *0x7ffe821ee680
tele 0x7ffe821ee680
tele 0x7ffe821ee680 2
context
pwndbg
canary
r
r
aaaaaaaa
r
reset
i functions 
i br
b * main
disass main
b * read_source 
r
c
si
ni
tele 0x7fffffffd030
si
tele $rbp-0x14
si
ssi
si
si
r
c
b * 0x400c1d
c
ni
si
r
c
c
ni
tele $rbp-0x14
si
b * read
disass read_source 
disass main
